# Climate Change Impact Analyzer: Technical Report

## Introduction

The Climate Change Impact Analyzer is a comprehensive Python-based tool designed to analyze and visualize climate data patterns. In today's era of rapid environmental transformation, understanding climate trends is critical for both policymaking and scientific research. Our system leverages machine learning techniques and visualization tools to enable detailed analysis of historical temperature data, with support for anomaly detection, clustering of weather stations, and trend forecasting.

This report describes the tool's architecture, modules, key algorithms, and results. It reflects the project’s evolution, including the lessons learned and the technical decisions made along the way.

## Data Processing

The dataset is sourced from NOAA and includes daily temperature records from multiple weather stations across the United States, including Tallahassee, Dallas, and Los Angeles. The `DataProcessor` module handles loading, cleaning, and normalization:

- **Cleaning:** Removes missing values, duplicate rows, and performs type conversion.
- **Interpolation:** Uses time-based interpolation to fill small gaps in daily temperature values.
- **Outlier Removal:** Implements Z-score filtering to remove anomalous spikes in temperature before analysis.
- **Normalization:** Standardizes temperature data for modeling.

This ensures that all downstream modules work with clean, reliable data.

## Machine Learning Algorithms

The `ClimateML` module includes three major capabilities:

1. **Temperature Prediction:** Uses an LSTM-based neural network to forecast the next 30 days of temperature for each station based on historical data. The model uses scaled sequences of past temperatures for training.

2. **Anomaly Detection:** Applies a statistical Z-score method to detect anomalies in daily temperatures. Any value exceeding a configurable threshold is flagged and visualized.

3. **Regional Clustering:** Uses k-means clustering to group weather stations into climate regions based on their long-term average temperatures. This allows visual comparison of stations with similar thermal profiles.

## Visualization Module

The `ClimateVisualizer` module uses `matplotlib` and `seaborn` to produce the following visualizations:

- **Temperature Trend Plots:** Plots actual temperature values over time for each station, with anomalies marked and future predictions shown as dashed lines.
- **Cluster Summary Table:** Lists each weather station and its assigned cluster to help users interpret regional similarities.
- **Heatmap:** Shows average yearly temperatures per station, highlighting changes over time. This data is grouped by year, offering a macro view of warming or cooling trends.

Each plot is saved to file for inclusion in reports or presentations.

## Project Structure

```
climate-analyzer/
├── data/
│   └── climate_data.csv
├── src/
│   ├── data_processor.py
│   ├── ml_algorithms.py
│   └── visualizer.py
├── tests/
│   ├── test_algorithms.py
│   └── test_visualizer.py
├── main.py
├── requirements.txt
└── report.txt
```

## Web Interface (Abandoned)

A Flask web application was partially developed to allow users to upload data and view plots in the browser. While functional in early testing, the web app was deprecated in favor of CLI execution due to rendering issues and time constraints. Future versions may revisit this for improved accessibility.

## Testing and Coverage

Unit tests were written for all major components:

- LSTM model prediction shape and behavior
- Anomaly detection sensitivity
- Clustering output structure and labeling
- Visualization routines (tested for file generation)

Tests were executed using `pytest`, and the project achieved over 80% test coverage.

## Conclusion

The Climate Change Impact Analyzer is a modular, extensible CLI tool capable of processing real-world climate datasets to extract trends, detect anomalies, and classify regions by temperature. Though the web interface was not finalized, the CLI offers a complete and reproducible pipeline from raw data to insightful visualizations.

The project meets all primary requirements and bonus objectives, including innovative clustering, predictive modeling, and clean interface design. It provides a strong foundation for continued work and could be adapted for public or research use with minor additions.

